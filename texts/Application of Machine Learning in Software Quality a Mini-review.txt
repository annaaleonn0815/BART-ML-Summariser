There is no doubt that Information and Communication Technologies are spreading at an unprecedented rate, but their patterns of diffusion are quite difficult to discern and are constantly changing. This evolution may well increase the digital divide between developed and developing countries. Those in the formal or informal sectors who have understood this issue have embarked on a digital transformation, which is characterized by a strong interest in software products. Clients in the informal sector, in particular, often purchase software products from inexperienced developers, so there is no guarantee that quality is always up to par. This low level of quality is explained by the lack of respect for the principles and rules defined in software engineering (SE). SE quality standards and frameworks require the measurement of software quality. Good software is not only functional but also must meet client expectations, be easy to use, perform well, and be maintainable. The prerequisite for software quality assurance includes adhering to development best practices: uniform code respecting coding standards, decentralized management of source code, and automation of the entire software construction chain. However, it is questionable whether these best practices can be easily applied and if the evaluation of software quality is straightforward. A major milestone will be upskilling developers by providing them with automatic software quality management tools. In this perspective, solutions based on Machine Learning (ML) could be a last resort. Indeed, it has been proven in several domains that ML methods can overcome some limitations of traditional methods. Therefore, it is relevant to explore these methods in the search for solutions to improve software quality. In this paper, we propose a literature review of various studies related to software quality in SE. Several literature reviews on software quality have been conducted, with few addressing the use of ML. However, these surveys do not cover all aspects of software quality. Our objective through this review is to contribute to the knowledge of ML-based tools for software quality assessment for the community of researchers and engineers in the Sahelian space. The remainder of this paper is organized as follows: Section II presents the methodology applied for data collection. Section III answers the research questions. As the need for software systems grows, their complexity and size evolve, making it difficult to ensure quality through testing and code inspection alone. Additionally, implementing changes during maintenance must be done with great care to avoid altering the system. Given the growing interest in software products in Sahelian countries, quality improvement solutions should turn to Machine Learning (ML). The survey aimed to measure the contribution of ML methods to improving software quality. The conclusions indicate that software defect prediction and maintainability are widely addressed topics in software quality improvement research. Regarding software defect prediction, several algorithms have been proposed to classify software modules as defective or non-defective. For maintainability prediction, studies have used UIMS and QUES data to propose predictors of maintenance effort with regression algorithms. More research is needed to apply these findings in software practices and assess the quality of software products.
